# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low/(low + high),
odds = prob_low / (1-prob_low)
)
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = round(low*100/(low + high),1),
odds = prob_low / (1-prob_low)
)
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (1-prob_low)
)
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (1-prob_low)
)
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ I(vituse), family = "binomial", data = df)
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ I(vituse), data = df)
vituse_glm
summary(vituse_glm)
vituse_sum <- summary(vituse_glm)
vituse_sum
vituse_sum$coefficients
bhat <- vituse_glm$coefficients
bhat
exp(bhat)
vituse_glm
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ vituse, data = df)
vituse_glm
vituse_sum <- summary(vituse_glm)
vituse_sum
vituse_sum$coefficients
bhat <- vituse_glm$coefficients
exp(bhat)
head(df)
mutate(df,
vituse = factor(vituse,
levels = c(1, 2, 3),
labels = c("often", "notoften", "no"))) -> df
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ vituse, data = df)
vituse_glm
vituse_sum <- summary(vituse_glm)
vituse_sum
vituse_sum$coefficients
bhat <- vituse_glm$coefficients
exp(bhat)
as.data.frame(exp(bhat))
plasma_vituse <- plasma_vituse |>
mutate(
exp(bhat)
)
plasma_vituse
plasma_vituse <- plasma_vituse |>
mutate(
odds_ratio = exp(bhat)
)
plasma_vituse
plasma_vituse$`exp(bhat)` <- NULL
plasma_vituse
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (100-prob_low)
)
mutate(df,
vituse = factor(vituse,
levels = c(1, 2, 3),
labels = c("often", "notoften", "no"))) -> df
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ vituse, data = df)
library(tidyverse); theme_set(theme_bw() + theme(text = element_text(size = 18)))
getwd()  # Check current working directory
list.files("Data")  # Check if 'carotene.xlsx' is inside the "Data" folder
install.packages("readxl")  # Only run once if not installed
library(readxl)
library(dplyr)  # Load dplyr for select()
# Lecture 3 - Elasticity - multiple linear regression
library(car)
library(rstatix)
library(GGally)
df <- read_excel("Data/carotene.xlsx")
head(df)
install.packages("readxl")
plasmab_molar_mass <- 40*12.010788+56*1.0079477
alpha <- 0.42*plasmab_molar_mass
# 225.4882
summary(df)
# 3rd Qu.: 230.0
#?ifelse
#plasmab$lowplasma_01 <- ifelse(plasmab$betaplasma < alpha, 1, 0)
glimpse(df)
df |> mutate(
lowplasma_01 = as.numeric(betaplasma < alpha),
lowplasma_hl = factor(lowplasma_01,
levels = c(0, 1),
labels = c("high", "low"))) -> df
ggplot(df, aes(age, lowplasma_01, color = lowplasma_hl)) +
geom_point() +
geom_smooth() +
xlab("") +
ylab("Low concentration of plasma β-carotene") +
labs(title = "Low plasma β-carotene(=1) or Not low β-carotene (=0) vs x")
lowplasma <- as.data.frame(
count(df, lowplasma_01))
lowplasma$percentage <- round(lowplasma$n*100/sum(lowplasma$n),1)
lowplasma
plasma_vituse <- df |> count(vituse, lowplasma_hl) |>
pivot_wider(id_cols = vituse,
names_from = lowplasma_hl,
values_from = n)
plasma_vituse
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (100-prob_low)
)
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (100-prob_low)
)
plasma_vituse
mutate(df,
vituse = factor(vituse,
levels = c(1, 2, 3),
labels = c("often", "notoften", "no"))) -> df
# odd ratios = OR = e^^beta_1
vituse_glm <- glm(betaplasma ~ vituse, data = df)
vituse_glm
vituse_sum <- summary(vituse_glm)
vituse_sum
vituse_sum$coefficients
bhat <- vituse_glm$coefficients
plasma_vituse <- plasma_vituse |>
mutate(
odds_ratio = exp(bhat)
)
plasma_vituse
vituse_glm
library(tidyverse); theme_set(theme_bw() + theme(text = element_text(size = 18)))
getwd()  # Check current working directory
list.files("Data")  # Check if 'carotene.xlsx' is inside the "Data" folder
install.packages("readxl")  # Only run once if not installed
library(readxl)
library(dplyr)  # Load dplyr for select()
# Lecture 3 - Elasticity - multiple linear regression
library(car)
library(rstatix)
library(GGally)
df <- read_excel("Data/carotene.xlsx")
head(df)
install.packages("readxl")
plasmab_molar_mass <- 40*12.010788+56*1.0079477
alpha <- 0.42*plasmab_molar_mass
# 225.4882
summary(df)
# 3rd Qu.: 230.0
#?ifelse
#plasmab$lowplasma_01 <- ifelse(plasmab$betaplasma < alpha, 1, 0)
glimpse(df)
df |> mutate(
lowplasma_01 = as.numeric(betaplasma < alpha),
lowplasma_hl = factor(lowplasma_01,
levels = c(0, 1),
labels = c("high", "low"))) -> df
ggplot(df, aes(age, lowplasma_01, color = lowplasma_hl)) +
geom_point() +
geom_smooth() +
xlab("") +
ylab("Low concentration of plasma β-carotene") +
labs(title = "Low plasma β-carotene(=1) or Not low β-carotene (=0) vs x")
lowplasma <- as.data.frame(
count(df, lowplasma_01))
lowplasma$percentage <- round(lowplasma$n*100/sum(lowplasma$n),1)
lowplasma
plasma_vituse <- df |> count(vituse, lowplasma_hl) |>
pivot_wider(id_cols = vituse,
names_from = lowplasma_hl,
values_from = n)
plasma_vituse
plasma_vituse
# Prob. for having low plasma B
# Correspnding odds
# odds = Pr(success) / Pr(failure)
plasma_vituse <- plasma_vituse |>
mutate(
prob_low = low*100/(low + high),
odds = prob_low / (100-prob_low)
)
plasma_vituse
plasma_vituse$odds[1]
# odd ratios = OR = oddsj/ odd ref
plasma_vituse <- plasma_vituse |>
mutate(
OR = odds / plasma_vituse$odds[1]
)
plasma_vituse
vituse_glm <- glm(lowplasma_01 ~ vituse, data = df)
vituse_glm
mutate(df,
vituse = factor(vituse,
levels = c(1, 2, 3),
labels = c("often", "notoften", "no"))) -> df
# odd ratios = OR = oddsj/ odd ref
plasma_vituse <- plasma_vituse |>
mutate(
OR = odds / plasma_vituse$odds[1]
)
plasma_vituse
plasma_vituse
vituse_glm <- glm(lowplasma_01 ~ vituse, data = df)
vituse_glm
vituse_sum
vituse_sum$coefficients
or = exp(bhat)
ci.or <- exp(ci.beta)
ci.beta <- confint(model_kcars_glm)
ci.beta <- confint(vituse_glm)
or = exp(bhat)
ci.or <- exp(ci.beta)
cbind(`exp(beta)` = or, ci.or) |> round(digits = 2)
cbind('beta'=bhat, `exp(beta)` = or, ci.or) |> round(digits = 2)
cbind('beta'=bhat,ci.beta, `exp(beta)` = or, ci.or) |> round(digits = 2)
vituse_glm <- glm(lowplasma_01 ~ vituse, data = df)
vituse_glm
vituse_glm <- glm(lowplasma_01 ~ vituse, family = "binomial", data = df)
vituse_glm
vituse_sum <- summary(vituse_glm)
vituse_sum
vituse_sum$coefficients
bhat <- vituse_glm$coefficients
ci.beta <- confint(vituse_glm)
or = exp(bhat)
ci.or <- exp(ci.beta)
cbind('beta'=bhat,ci.beta, `exp(beta)` = or, ci.or) |> round(digits = 2)
df |> mutate(phat = predict(vituse_glm, type = "response")) -> vituse_pred
vituse_pred
df$phat <- NULL
vituse_pred <- df %>>
vituse_pred <- df %>%
select(vituse, betaplasma, lowplasma_01, lowplasma_hl)
vituse_pred
vituse_pred |> mutate(phat = predict(vituse_glm, type = "response")) -> vituse_pred
vituse_pred
vituse_glm$coefficients[1]
odds_0 = exp(vituse_glm$coefficients[1])
odds_1 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2])
odds_2 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[3])
odds_0 = exp(vituse_glm$coefficients[1])
odds_1 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2])
odds_2 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[3])
cbind("odds" = c(odds_0, odds_1, odds_2))
vituse_pred
p_1 = exp((vituse_glm$coefficients[1])) / 1 + exp((vituse_glm$coefficients[1]))
p_1
(vituse_glm$coefficients[1]
(vituse_glm$coefficients[1]
vituse_glm$coefficients[1]
vituse_glm$coefficients[1]
p_1 = exp((vituse_glm$coefficients[1]))
p_1
exp(vituse_glm$coefficients[1])
exp(vituse_glm$coefficients[1]) / 1 + exp(vituse_glm$coefficients[1])
exp(vituse_glm$coefficients[1]) / (1 + exp(vituse_glm$coefficients[1]))
p_1 = exp(vituse_glm$coefficients[1]) / (1 + exp(vituse_glm$coefficients[1]))
p_1
p_2 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]) / (1 + exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]))
p_2
p_3
p_3 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]) / (1 + exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]))
p_3
cbind("vituse"=c(1,2,3),"odds" = c(odds_0, odds_1, odds_2), "prob_low" = c(p_1,p_2,p_3))
vituse_pred
vituse_pred
vituse_pred <- data.frame(vituse = c("often", "notoften", "no"))
cbind(vituse_pred,
predict(vituse_glm, vituse_pred, se.fit = TRUE),
conf = predict(vituse_glm, plasmaB_x0, interval = "confidence"),
) |>
mutate(df = NULL, residual.scale = NULL,
conf.fit = NULL, pred.fit = NULL)
cbind(vituse_pred,
predict(vituse_glm, vituse_pred, se.fit = TRUE),
conf = predict(vituse_glm, vituse_pred, interval = "confidence"),
) |>
mutate(df = NULL, residual.scale = NULL,
conf.fit = NULL, pred.fit = NULL)
vituse_pred <- data.frame(vituse = c("often", "notoften", "no"))
cbind(vituse_pred,
predict(vituse_glm, vituse_pred, se.fit = TRUE),
conf = predict(vituse_glm, vituse_pred, interval = "confidence"),
) |>
mutate(df = NULL, residual.scale = NULL,
conf.fit = NULL, pred.fit = NULL)
cbind(vituse_pred,
predict(vituse_glm, vituse_pred, se.fit = TRUE),
conf = predict(vituse_glm, vituse_pred, interval = "confidence")
) |>
mutate(df = NULL, residual.scale = NULL,
conf.fit = NULL, pred.fit = NULL)
cbind(vituse_pred,
phat = predict(model_kcars_glm, type = "response"))
cbind(vituse_pred,
phat = predict(vituse_glm, type = "response"))
vituse_pred
cbind(vituse_pred,
phat = predict(vituse_glm, vituse_pred, se.fit = TRUE))
cbind(vituse_pred,
phat = predict(vituse_glm, vituse_pred, se.fit = FALSE),
conf = predict(vituse_glm, vituse_pred, interval = "confidence"))
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = FALSE),
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit))
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = FALSE),
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit)
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = FALSE))
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = FALSE),
logit.lwr = logit - lambda*logit.se,
logit.upr = logit.fit + lambda*logit.se)
lambda <- qnorm(1 - 0.05/2)
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = FALSE),
logit.lwr = logit - lambda*logit.se,
logit.upr = logit.fit + lambda*logit.se)
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = TRUE),
logit.lwr = logit - lambda*logit.se,
logit.upr = logit.fit + lambda*logit.se)
cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = TRUE))
glimpse(vituse_pred)
vituse_pred
vituse_pred <- cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = TRUE))
glimpse(vituse_pred)
vituse_pred |> mutate(
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit) -> oslo_pred
glimpse(oslo_pred)
vituse_pred <- cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = TRUE),
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit)
glimpse(vituse_pred)
vituse_pred |> mutate(
"odds" = c(odds_0, odds_1, odds_2),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = c(p_1,p_2,p_3)) -> vituse_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit) -> oslo_pred
glimpse(oslo_pred)
vituse_pred |> mutate(
"odds" = c(odds_0, odds_1, odds_2),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = c(p_1,p_2,p_3)) -> vituse_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit) -> oslo_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit) -> vituse_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
"odds" = c(odds_0, odds_1, odds_2),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = c(p_1,p_2,p_3)) -> vituse_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
p.lwr = odds.lwr/(1 + odds.lwr),
p.upr = odds.upr/(1 + odds.upr)) -> vituse_pred
glimpse(vituse_pred)
View(vituse_pred)
vituse_pred <- df %>%
select(vituse, betaplasma, lowplasma_01, lowplasma_hl)
vituse_pred
vituse_pred |> mutate(phat = predict(vituse_glm, type = "response")) -> vituse_pred
vituse_glm$coefficients[1]
odds_0 = exp(vituse_glm$coefficients[1])
odds_1 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2])
odds_2 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[3])
p_1 = exp(vituse_glm$coefficients[1]) / (1 + exp(vituse_glm$coefficients[1]))
p_1
p_2 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]) / (1 + exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[2]))
p_2
p_3 = exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[3]) / (1 + exp(vituse_glm$coefficients[1] + vituse_glm$coefficients[3]))
p_3
cbind("vituse"=c(1,2,3),"odds" = c(odds_0, odds_1, odds_2), "prob_low" = c(p_1,p_2,p_3))
vituse_pred <- data.frame(vituse = c("often", "notoften", "no"))
vituse_pred
lambda <- qnorm(1 - 0.05/2)
vituse_pred <- cbind(vituse_pred,
logit = predict(vituse_glm, vituse_pred, se.fit = TRUE))
glimpse(vituse_pred)
vituse_pred |> mutate(
logit.lwr = logit.fit - lambda*logit.se.fit,
logit.upr = logit.fit + lambda*logit.se.fit) -> vituse_pred
glimpse(vituse_pred)
vituse_pred |> mutate(
"odds" = c(odds_0, odds_1, odds_2),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = c(p_1,p_2,p_3)) -> vituse_pred
vituse_pred |> mutate(
p.lwr = odds.lwr/(1 + odds.lwr),
p.upr = odds.upr/(1 + odds.upr)) -> vituse_pred
glimpse(vituse_pred)
# Try more effective code
vituse_pred <- predict(vituse_glm, vituse_pred, se.fit = TRUE)
vituse_pred
vituse_x0 <- data.frame(vituse = c("often", "notoften", "no"))
vituse_x0 |> mutate(
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
logit.upr = vituse_pred$fit + lambda*vituse_pred$se.fit) -> vituse_x0
vituse_x0 <- data.frame(vituse = c("often", "notoften", "no"))
vituse_x0 |> mutate(
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
logit.upr = vituse_pred$fit + lambda*vituse_pred$se.fit,
"odds" = exp(vituse_pred$fit),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = exp(vituse_pred$fit)/ (1+exp(vituse_pred$fit))) -> vituse_x0
vituse_x0
vituse_x0 |> mutate(
logit = vituse_pred$fit
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
vituse_x0 |> mutate(
logit = vituse_pred$fit,
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
logit.upr = vituse_pred$fit + lambda*vituse_pred$se.fit,
"odds" = exp(vituse_pred$fit),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = exp(vituse_pred$fit)/ (1+exp(vituse_pred$fit))) -> vituse_x0
vituse_x0
# Try more effective code
vituse_pred <- predict(vituse_glm, vituse_pred, se.fit = TRUE)
vituse_pred
vituse_x0 <- data.frame(vituse = c("often", "notoften", "no"))
vituse_x0 |> mutate(
logit = vituse_pred$fit,
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
logit.upr = vituse_pred$fit + lambda*vituse_pred$se.fit,
"odds" = exp(vituse_pred$fit),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = exp(vituse_pred$fit)/ (1+exp(vituse_pred$fit))) -> vituse_x0
vituse_x0
# Try more effective code
vituse_pred <- predict(vituse_glm, vituse_pred, se.fit = TRUE)
vituse_pred
vituse_x0 <- data.frame(vituse = c("often", "notoften", "no"))
vituse_x0 |> mutate(
logit = vituse_pred$fit,
logit.lwr = vituse_pred$fit - lambda*vituse_pred$se.fit,
logit.upr = vituse_pred$fit + lambda*vituse_pred$se.fit,
"odds" = exp(vituse_pred$fit),
odds.lwr = exp(logit.lwr),
odds.upr = exp(logit.upr),
"prob_low" = exp(vituse_pred$fit)/ (1+exp(vituse_pred$fit)),
p.lwr = odds.lwr/(1 + odds.lwr),
p.upr = odds.upr/(1 + odds.upr)) -> vituse_x0
vituse_x0
D_diff <- vituse_sum$null.deviance - vituse_sum$deviance
df_diff <- vituse_sum$df.null - vituse_sum$df.residual
chi2_alpha <- qchisq(p = 1 - 0.05, df = df_diff)
Pvalue <- pchisq(q = D_diff, df = df_diff, lower.tail = FALSE)
cbind(D_diff, df_diff, chi2_alpha, Pvalue)
